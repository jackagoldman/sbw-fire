if(X %in% colnames(df2)){
#remove X column
df2 <- dplyr::select(-c(X))
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
#return data table
return(data_table)
}else{
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
#return data table
return(data_table)
}
# check to see if there is an second table supplied. if missing, print message
if(missing(df3)){
message("Only one table supplied, joining key to one table")
# check to see if x column.
}else if(X %in% colnames(df3)){
df3 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
return(data_table)
message("joined two tables to key")
}else{
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
return(data_table)
message("joined two tables to key")
}
# check to see if there is an third table supplied.
if(missing(df4)){
# check to see if x column.
}else if(X %in% colnames(df3)){
df4 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}else{
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}
# check to see if there is an fourth table supplied.
if(missing(df5)){
# check to see if x column.
}else if(X %in% colnames(df5)){
df5 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}else{
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}
return(data_table)
#specify the method of analysis
#if(method == "pairwise"){
#pivot wider by defoliation
#data_table <-  tidyr::pivot_wider()
#}
# }else if(method == "regression"){
#}
}
df <- join_tables(df_key, defol, severity)
#' @param df3 dataframe must contain ID column
#' @param df4 dataframe must contain ID column
#' @param df5 dataframe must contain ID column
#' @param method One of pairwise or regression. Structures dataframe according to analysis type
#'
#' @return large data table joined based on ID column
#' @export
#'
#' @examples join_tables(df_key, defol_table, severity_table, method = "pairwise")
#'
join_tables <- function(key, df2, df3, df4, df5, method) {
#load required packages
require(dplyr)
require(tidyverse)
# check to see if the key is provided, if not return error
if(missing(key)){
stop("Please provide a key")
}
# check to see if a table is provided to join to the key. if not return error
if(missing(df2)){
stop("Missing table to join to key")
}
# check to see if there is an X column in the table. Sometimes this happens using csv. If so, remove and
# join to key. If no X column, join to key.
if(X %in% colnames(df2)){
#remove X column
df2 <- dplyr::select(-c(X))
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
#return data table
return(data_table)
}else{
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
#return data table
return(data_table)
}
# check to see if there is an second table supplied. if missing, print message
if(missing(df3)){
message("Only one table supplied, joining key to one table")
# check to see if x column.
}else if(X %in% colnames(df3)){
df3 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
return(data_table)
message("joined two tables to key")
}else{
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
return(data_table)
message("joined two tables to key")
}
# check to see if there is an third table supplied.
if(missing(df4)){
# check to see if x column.
}else if(X %in% colnames(df4)){
df4 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}else{
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}
# check to see if there is an fourth table supplied.
if(missing(df5)){
# check to see if x column.
}else if(X %in% colnames(df5)){
df5 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}else{
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}
return(data_table)
#specify the method of analysis
#if(method == "pairwise"){
#pivot wider by defoliation
#data_table <-  tidyr::pivot_wider()
#}
# }else if(method == "regression"){
#}
}
df <- join_tables(df_key, defol, severity)
df <- join_tables(df_key, defol, severity)
#' @param df3 dataframe must contain ID column
#' @param df4 dataframe must contain ID column
#' @param df5 dataframe must contain ID column
#' @param method One of pairwise or regression. Structures dataframe according to analysis type
#'
#' @return large data table joined based on ID column
#' @export
#'
#' @examples join_tables(df_key, defol_table, severity_table, method = "pairwise")
#'
join_tables <- function(key, df2, df3, df4, df5, method) {
#load required packages
require(dplyr)
require(tidyverse)
# check to see if the key is provided, if not return error
if(missing(key)){
stop("Please provide a key")
}
# check to see if a table is provided to join to the key. if not return error
if(missing(df2)){
stop("Missing table to join to key")
}
# check to see if there is an X column in the table. Sometimes this happens using csv. If so, remove and
# join to key. If no X column, join to key.
if("X" %in% colnames(df2)){
#remove X column
df2 <- dplyr::select(-c(X))
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
#return data table
return(data_table)
}else{
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
#return data table
return(data_table)
}
# check to see if there is an second table supplied. if missing, print message
if(missing(df3)){
message("Only one table supplied, joining key to one table")
# check to see if x column.
}else if("X" %in% colnames(df3)){
df3 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
return(data_table)
message("joined two tables to key")
}else{
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
return(data_table)
message("joined two tables to key")
}
# check to see if there is an third table supplied.
if(missing(df4)){
# check to see if x column.
}else if("X" %in% colnames(df4)){
df4 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}else{
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}
# check to see if there is an fourth table supplied.
if(missing(df5)){
# check to see if x column.
}else if("X" %in% colnames(df5)){
df5 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}else{
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}
return(data_table)
#specify the method of analysis
#if(method == "pairwise"){
#pivot wider by defoliation
#data_table <-  tidyr::pivot_wider()
#}
# }else if(method == "regression"){
#}
}
df <- join_tables(df_key, defol, severity)
df <- join_tables(df_key, defol, severity)
df <- join_tables(id, defol, severity)
View(df)
#' @param df3 dataframe must contain ID column
#' @param df4 dataframe must contain ID column
#' @param df5 dataframe must contain ID column
#' @param method One of pairwise or regression. Structures dataframe according to analysis type
#'
#' @return large data table joined based on ID column
#' @export
#'
#' @examples join_tables(df_key, defol_table, severity_table, method = "pairwise")
#'
join_tables <- function(key, df2, df3, df4, df5, method) {
#load required packages
require(dplyr)
require(tidyverse)
# check to see if the key is provided, if not return error
if(missing(key)){
stop("Please provide a key")
}
# check to see if a table is provided to join to the key. if not return error
if(missing(df2)){
stop("Missing table to join to key")
}
# check to see if there is an X column in the table. Sometimes this happens using csv. If so, remove and
# join to key. If no X column, join to key.
if("X" %in% colnames(df2)){
#remove X column
df2 <- dplyr::select(-c(X))
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
}else{
#join table table based on ID and fire name
data_table <- dplyr::left_join(key, df2 , by = c("id", "fire_name"))
}
# check to see if there is an second table supplied. if missing, print message
if(missing(df3)){
message("Only one table supplied, joining key to one table")
# check to see if x column.
}else if("X" %in% colnames(df3)){
df3 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
message("joined two tables to key")
}else{
data_table <-  left_join(data_table, df3, by = c("id", "fire_name"))
message("joined two tables to key")
}
# check to see if there is an third table supplied.
if(missing(df4)){
# check to see if x column.
}else if("X" %in% colnames(df4)){
df4 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}else{
data_table <-  left_join(data_table, df4, by = c("id", "fire_name"))
return(data_table)
message("joined three tables to key")
}
# check to see if there is an fourth table supplied.
if(missing(df5)){
# check to see if x column.
}else if("X" %in% colnames(df5)){
df5 <- dplyr::select(-c(X))
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}else{
data_table <-  left_join(data_table, df5, by = c("id", "fire_name"))
return(data_table)
message("joined four tables to key")
}
return(data_table)
#specify the method of analysis
#if(method == "pairwise"){
#pivot wider by defoliation
#data_table <-  tidyr::pivot_wider()
#}
# }else if(method == "regression"){
#}
}
df <- join_tables(id, defol, severity)
df <- join_tables(id, defol, severity)
df <- left_join(id, defol, by ="id", "fire_name")
df <- left_join(df, severity, by = c("id", "fire_name"))
df <- left_join(id, defol, by = c("id", "fire_name"))
df <- left_join(df, severity, by = c("id", "fire_name"))
pairwise.t.test(df$defol, df$rbrMedian)
summary(pairwise.t.test(df$defol, df$rbrMedian))
df <- df |>
mutate(defol = case_when(defol == "1" ~ "defoliated",
defol == "2" ~ "Non-Defoliated"))
summary(pairwise.t.test(df$defol, df$rbrMedian))
df <- left_join(id, defol, by = c("id", "fire_name"))
df <- left_join(df, severity, by = c("id", "fire_name"))
stat.test <- df %>%
pairwise_t_test(
defol ~ rbrMedian, paired = TRUE,
p.adjust.method = "bonferroni"
)
stat.test <- df %>%
pairwise_t_test(
defol ~ rbrMedian, paired = TRUE,
p.adjust.method = "bonferroni"
)
library(rstatix)
stat.test <- df %>%
pairwise_t_test(
defol ~ rbrMedian, paired = TRUE,
p.adjust.method = "bonferroni"
)
t.test(df$defol, df$rbrMedian, pairwise = TRUE)
res_median <- t.test(df$defol, df$rbrMedian, pairwise = TRUE)
res_extreme <- t.test(df$defol, df$rbrExtreme, pairwise = TRUE)
res_extreme
res_cv <- t.test(df$defol, df$rbrCV, pairwise = TRUE)
res_cv
res_median
defol_only <-  df |>
filter(defol == 1)
defol_only |> ggplot() +
geom_point(aes(x = years_defol, y = rbrMedian)) +
geom_line(method = "lm")
defol_only |> ggplot() +
geom_point(aes(x = years_defol, y = rbrMedian)) +
geom_smooth(method = "lm")
defol_only |> ggplot() +
geom_point(aes(x = years_defol, y = rbrMedian)) +
geom_smooth(method = "lm", identity = "stat")
defol_only |> ggplot() +
geom_point(aes(x = years_defol, y = rbrMedian)) +
geom_smooth(aes(y = rbrMedian), method = "lm", identity = "stat")
defol_only |> ggplot() +
geom_point(aes(x = years_defol, y = rbrMedian)) +
geom_smooth()
defol_only |> ggplot(aes(x = years_defol, y = rbrMedian)) +
geom_point(alpha = 0.5) +
geom_smooth()
View(defol_only)
defol_only |> ggplot(aes(x = tsd, y = rbrMedian)) +
geom_point(alpha = 0.5) +
geom_smooth()
defol_only |> ggplot(aes(x = tsd, y = rbrMedian)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm")
defol_only |> ggplot(aes(x = tsd, y = rbrExtreme)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm")
defol_only |> ggplot(aes(x = tsd, y = rbrCV)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm")
defol_only <- defol_only |>
mutate(window = case_when(tsd >= 0 & tsd <= 5 ~ "1",
tsd >= 6 & tsd <= 10 ~ "2",
tsd >= 11 & tsd <=15 ~ "3" ))
mod_window = lm(rbrMedian ~ window, data = defol_only)
summary(mod_window)
mod_window = anova(rbrMedian ~ window, data = defol_only)
mod_window = aov(rbrMedian ~ window, data = defol_only)
summary(mod_window)
mod_window = Anova(rbrMedian ~ window, data = defol_only)
mod_window = lm(rbrMedian ~ window, data = defol_only)
summary(mod_window)
TukeyHSD(mod_window, conf.level=.95)
mod_window = aov(rbrMedian ~ window, data = defol_only)
summary(mod_window)
TukeyHSD(mod_window, conf.level=.95)
ext_window = aov(rbrExtreme ~ window, data = defol_only)
summary(ext_window)
TukeyHSD(ext_window, conf.level=.95)
cv_window = aov(rbrCV ~ window, data = defol_only)
summary(cv_window)
TukeyHSD(cv_window, conf.level=.95)
feather::read_feather("/Users/jgoldman/Library/CloudStorage/OneDrive-UniversityofToronto/Data/fire-only-sbw-only-perimeters/database_files/defol_table.feather")
install.packages("feather")
feather::read_feather("/Users/jgoldman/Library/CloudStorage/OneDrive-UniversityofToronto/Data/fire-only-sbw-only-perimeters/database_files/defol_table.feather")
arrow::read_feather("/Users/jgoldman/Library/CloudStorage/OneDrive-UniversityofToronto/Data/fire-only-sbw-only-perimeters/database_files/defol_table.feather")
install.packages("arrow")
arrow::read_feather("/Users/jgoldman/Library/CloudStorage/OneDrive-UniversityofToronto/Data/fire-only-sbw-only-perimeters/database_files/defol_table.feather")
fth <- arrow::read_feather("/Users/jgoldman/Library/CloudStorage/OneDrive-UniversityofToronto/Data/fire-only-sbw-only-perimeters/database_files/defol_table.feather")
View(fth)
ggplot(df, aes(x = defol, y = rbrMedian)) +
geom_boxplot()+
```
library(ggpubr)
ggplot(df, aes(x = defol, y = rbrMedian)) +
geom_boxplot()+ stat_compare_means(method = "t.test", paired = TRUE)
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_compare_means(method = "t.test", paired = TRUE)
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_compare_means(method = "t.test")
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_compare_means()
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test()
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
df |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test()
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated"))
df |> ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test()
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test()
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test(label = "Welch Anova, italic(p) = {custom_p_format(p)}{p.signif}")
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test()
res_median <- t.test(df$defol, df$rbrMedian, pairwise = TRUE)
res_median
res_median <- t.test(df$defol, df$rbrMedian)
res_median
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_welch_anova_test(label = "p.signif")
df |> mutate(defol = case_when(defol == 1 ~ "Defoliated",
defol == 0 ~ "Non-Defoliated")) |>
ggplot(aes(x = defol, y = rbrMedian)) +
geom_boxplot() + stat_pwc()
res_median
res_median <- res_median |> as_tibble()
res_median <- res_median |> as.data.frame()
res_median <- res_median
res_median
View(res_median)
res_median <- df |>
t.test(defolm ~ rbrMedian) |>
add_significance()
res_median <- df |>
t.test(defolm , rbrMedian) |>
add_significance()
res_median <- df |>
t.test(defol , rbrMedian) |>
add_significance()
res_median <- df |>
t.test(defol ~ rbrMedian) |>
add_significance()
res_median <- df |>
t_test(defol ~ rbrMedian) |>
add_significance()
res_median <- t.test(df$defol, df$rbrMedian)
res_median
res_median <- t.test(df$defol, df$rbrMedian, paired = TRUE)
res_median
df
res_median <- t.test(df$defol, df$rbrMedian, paired = TRUE)
View(df)
df <- df[order(df$id, df$fire_name),]
res_median <- t.test(df$defol, df$rbrMedian, paired = TRUE)
res_median
res_extreme <- t.test(df$defol, df$rbrExtreme, paired  = TRUE)
res_extreme
res_cv <- t.test(df$defol, df$rbrCV, paired = TRUE)
res_cv
DiagrammeR::grViz("../Figures/chapter3-step1-dag.gv")
